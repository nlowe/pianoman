// Code generated by mockery v2.40.1. DO NOT EDIT.

package fake

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	pianobar "github.com/nlowe/pianoman/pianobar"
)

// FeedbackProvider is an autogenerated mock type for the FeedbackProvider type
type FeedbackProvider struct {
	mock.Mock
}

type FeedbackProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *FeedbackProvider) EXPECT() *FeedbackProvider_Expecter {
	return &FeedbackProvider_Expecter{mock: &_m.Mock}
}

// LoveTrack provides a mock function with given fields: ctx, t
func (_m *FeedbackProvider) LoveTrack(ctx context.Context, t pianobar.Track) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for LoveTrack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pianobar.Track) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FeedbackProvider_LoveTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoveTrack'
type FeedbackProvider_LoveTrack_Call struct {
	*mock.Call
}

// LoveTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - t pianobar.Track
func (_e *FeedbackProvider_Expecter) LoveTrack(ctx interface{}, t interface{}) *FeedbackProvider_LoveTrack_Call {
	return &FeedbackProvider_LoveTrack_Call{Call: _e.mock.On("LoveTrack", ctx, t)}
}

func (_c *FeedbackProvider_LoveTrack_Call) Run(run func(ctx context.Context, t pianobar.Track)) *FeedbackProvider_LoveTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pianobar.Track))
	})
	return _c
}

func (_c *FeedbackProvider_LoveTrack_Call) Return(_a0 error) *FeedbackProvider_LoveTrack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeedbackProvider_LoveTrack_Call) RunAndReturn(run func(context.Context, pianobar.Track) error) *FeedbackProvider_LoveTrack_Call {
	_c.Call.Return(run)
	return _c
}

// UnLoveTrack provides a mock function with given fields: ctx, t
func (_m *FeedbackProvider) UnLoveTrack(ctx context.Context, t pianobar.Track) error {
	ret := _m.Called(ctx, t)

	if len(ret) == 0 {
		panic("no return value specified for UnLoveTrack")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, pianobar.Track) error); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FeedbackProvider_UnLoveTrack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnLoveTrack'
type FeedbackProvider_UnLoveTrack_Call struct {
	*mock.Call
}

// UnLoveTrack is a helper method to define mock.On call
//   - ctx context.Context
//   - t pianobar.Track
func (_e *FeedbackProvider_Expecter) UnLoveTrack(ctx interface{}, t interface{}) *FeedbackProvider_UnLoveTrack_Call {
	return &FeedbackProvider_UnLoveTrack_Call{Call: _e.mock.On("UnLoveTrack", ctx, t)}
}

func (_c *FeedbackProvider_UnLoveTrack_Call) Run(run func(ctx context.Context, t pianobar.Track)) *FeedbackProvider_UnLoveTrack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(pianobar.Track))
	})
	return _c
}

func (_c *FeedbackProvider_UnLoveTrack_Call) Return(_a0 error) *FeedbackProvider_UnLoveTrack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *FeedbackProvider_UnLoveTrack_Call) RunAndReturn(run func(context.Context, pianobar.Track) error) *FeedbackProvider_UnLoveTrack_Call {
	_c.Call.Return(run)
	return _c
}

// NewFeedbackProvider creates a new instance of FeedbackProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFeedbackProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *FeedbackProvider {
	mock := &FeedbackProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
